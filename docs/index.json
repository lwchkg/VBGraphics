{
  "index.html": {
    "href": "index.html",
    "title": "VBGraphics | VBGraphics documentation",
    "keywords": "VBGraphics VBGraphics is a QBasic style graphics and keyboard routines for .NET framework. VBGraphics provides simple graphics and keyboard handling routines that wraps around WinForms and GDI+. With these routines, beginning programmers can create simple games in the QBasic way. Example project: Nibbles for VBGraphics See the documentation for API documentation and more tutorials. Features Simple and yet powerful Graphics windows can be resized or maximized, with the content automatically zoomed to fill the whole window. Works correctly on high DPI settings. Events are raised when the user try to close the graphics window, when Windows shut down, and when the GraphicsWindow object is disposed. User closing of the graphics window can be cancelled programatically. Extensible You can add your favourite polygon routine, Beizer curve routines, or whatever, as extension methods , without modifying VBGraphics source code. The underlying form (wrapped around WinForms) and bitmap of a graphics window can be accessed and manipulated. Routines available Lines, rectangles and ellipses Text rendering Bitmap image handling Interactive text input Keyboard routines Installation VBGraphics is available as a NuGet module. Beginners should following the following steps for installation. Create a new Visual Basic Console App. Install the extension VBGraphics. In the Solution Explorer, right click your project (e.g. ConsoleApp1), then select “Manage NuGet Packages…”. A new tab will appear. Click “Browser” in the top-left corner of the tab. Type “VBGraphics” in the text box below. Press Enter. Click on the package. Click “Install”. Make sure you have selected the latest version. Add references System.Drawing and System.Windows.Forms. In the Solution Explorer, right click your project (e.g. ConsoleApp1), then select “Properties”. A new tab will appear. Click “References”. Click “Add…”. Click “Assemblies”. Find the items “System.Drawing” and “System.Windows.Forms”. Check both of them, and press “OK”. In the imported namespace section, check both “System.Drawing” and “System.Windows.Forms”. Add some sample code (see below). Sample code Imports VBGraphics Imports VBGraphics.BitmapImage Imports VBGraphics.Shapes Imports VBGraphics.Text Module Module1 Sub Main() ' Create a graphics windows with resolution 600 x 400. Dim gw As New GraphicsWindow(600, 400) ' Draw something in the graphics window... gw.DrawLine(0, 0, 599, 399, Color.Red) gw.DrawText(\"Press any key to close...\", 0, 370, Color.White, \"Cambria\", 16) ' Make the graphics window closable, and end the program when the window is closed. gw.EndProgramOnClose = True gw.CanClose = True ' Reads a key in the keyboard. Note: if the user closes the window, this statement will not ' finish execution. gw.ReadKey() ' It is a good habit to dispose the graphics window after use. gw.Dispose() End Sub End Module To-dos Update documentation site. Add tutorials in the documentation site for common tasks. Add video of installation instructions. Add template project for easier installation. Add routines for mouse and touch screen. Add more graphics routines. (e.g. Polygons? DrawText overloads?)"
  },
  "api/VBGraphics.Shapes.html": {
    "href": "api/VBGraphics.Shapes.html",
    "title": "Class Shapes | VBGraphics documentation",
    "keywords": "Class Shapes Inheritance Shapes Namespace : VBGraphics Assembly : VBGraphics.dll Syntax public class Shapes Methods | Improve this Doc View Source Clear(GraphicsWindow, Color) Fill the graphics windows with the specified color. Declaration [Extension] public static void Clear(this GraphicsWindow gw, Color color) Parameters Type Name Description GraphicsWindow gw The graphics window object Color color The color | Improve this Doc View Source DrawEllipse(GraphicsWindow, Int32, Int32, Int32, Int32, Nullable<Color>, Color, Single) Draw an ellipse defined by a bounding rectangle, and with the specified fill color, stroke color, and stroke width. The bounding rectangle has its top-left corner at (x, y), and the specified width and height. The stroke is drawn without anti-aliasing. Declaration [Extension] public static void DrawEllipse(this GraphicsWindow gw, int x, int y, int width, int height, Color? fill, Color stroke, float strokeWidth) Parameters Type Name Description GraphicsWindow gw The graphics object Int32 x The x-coordinate of the top-left corner of the bounding rectangle that defines the ellipse. Int32 y The y-coordinate of the top-left corner of the bounding rectangle that defines the ellipse. Int32 width The width of the bounding rectangle that defines the ellipse Int32 height The height of the bounding rectangle that defines the ellipse System.Nullable < Color > fill The color to fill, or Nothing for no fill Color stroke The color of the stroke, or Nothing for no stroke Single strokeWidth The width of the stroke | Improve this Doc View Source DrawEllipse(GraphicsWindow, Int32, Int32, Int32, Int32, Nullable<Color>, Nullable<Color>) Draw an ellipse defined by a bounding rectangle, and with the specified fill color and stroke color. The bounding rectangle has its top-left corner at (x, y), and the specified width and height. The stroke is drawn without anti-aliasing. Declaration [Extension] public static void DrawEllipse(this GraphicsWindow gw, int x, int y, int width, int height, Color? fill, Color? stroke) Parameters Type Name Description GraphicsWindow gw The graphics object Int32 x The x-coordinate of the top-left corner of the bounding rectangle that defines the ellipse. Int32 y The y-coordinate of the top-left corner of the bounding rectangle that defines the ellipse. Int32 width The width of the bounding rectangle that defines the ellipse Int32 height The height of the bounding rectangle that defines the ellipse System.Nullable < Color > fill The color to fill, or Nothing for no fill System.Nullable < Color > stroke The color of the stroke, or Nothing for no stroke | Improve this Doc View Source DrawEllipseWithSmoothing(GraphicsWindow, Int32, Int32, Int32, Int32, Nullable<Color>, Color, Single) Draw an ellipse defined by a bounding rectangle, and with the specified fill color, stroke color, and stroke width. The bounding rectangle has its top-left corner at (x, y), and the specified width and height. The stroke is drawn with anti-aliasing. Declaration [Extension] public static void DrawEllipseWithSmoothing(this GraphicsWindow gw, int x, int y, int width, int height, Color? fill, Color stroke, float strokeWidth) Parameters Type Name Description GraphicsWindow gw The graphics object Int32 x The x-coordinate of the top-left corner of the bounding rectangle that defines the ellipse. Int32 y The y-coordinate of the top-left corner of the bounding rectangle that defines the ellipse. Int32 width The width of the bounding rectangle that defines the ellipse Int32 height The height of the bounding rectangle that defines the ellipse System.Nullable < Color > fill The color to fill, or Nothing for no fill Color stroke The color of the stroke, or Nothing for no stroke Single strokeWidth The width of the stroke | Improve this Doc View Source DrawEllipseWithSmoothing(GraphicsWindow, Int32, Int32, Int32, Int32, Nullable<Color>, Nullable<Color>) Draw an ellipse defined by a bounding rectangle, and with the specified fill color and stroke color. The bounding rectangle has its top-left corner at (x, y), and the specified width and height. The stroke is drawn with anti-aliasing. Declaration [Extension] public static void DrawEllipseWithSmoothing(this GraphicsWindow gw, int x, int y, int width, int height, Color? fill, Color? stroke) Parameters Type Name Description GraphicsWindow gw The graphics object Int32 x The x-coordinate of the top-left corner of the bounding rectangle that defines the ellipse. Int32 y The y-coordinate of the top-left corner of the bounding rectangle that defines the ellipse. Int32 width The width of the bounding rectangle that defines the ellipse Int32 height The height of the bounding rectangle that defines the ellipse System.Nullable < Color > fill The color to fill, or Nothing for no fill System.Nullable < Color > stroke The color of the stroke, or Nothing for no stroke | Improve this Doc View Source DrawLine(GraphicsWindow, Int32, Int32, Int32, Int32, Color) Draw a line from (x1, y1) to (x2, y2) in the graphics window with the specified color and without anti-aliasing. Declaration [Extension] public static void DrawLine(this GraphicsWindow gw, int x1, int y1, int x2, int y2, Color color) Parameters Type Name Description GraphicsWindow gw The graphics window object Int32 x1 The x-coordinate of the first point Int32 y1 The y-coordinate of the first point Int32 x2 The x-coordinate of the second point Int32 y2 y-coordinate of the first point Color color The color | Improve this Doc View Source DrawLine(GraphicsWindow, Int32, Int32, Int32, Int32, Color, Single) Draw a line from (x1, y1) to (x2, y2) in the graphics window with the specified color and line width, and without anti-aliasing. Declaration [Extension] public static void DrawLine(this GraphicsWindow gw, int x1, int y1, int x2, int y2, Color color, float width) Parameters Type Name Description GraphicsWindow gw The graphics window object Int32 x1 The x-coordinate of the first point Int32 y1 The y-coordinate of the first point Int32 x2 The x-coordinate of the second point Int32 y2 y-coordinate of the first point Color color The color Single width Line width | Improve this Doc View Source DrawLineWithSmoothing(GraphicsWindow, Int32, Int32, Int32, Int32, Color) Draw a line from (x1, y1) to (x2, y2) in the graphics window with the specified color and with anti-aliasing. Declaration [Extension] public static void DrawLineWithSmoothing(this GraphicsWindow gw, int x1, int y1, int x2, int y2, Color color) Parameters Type Name Description GraphicsWindow gw The graphics window object Int32 x1 The x-coordinate of the first point Int32 y1 The y-coordinate of the first point Int32 x2 The x-coordinate of the second point Int32 y2 y-coordinate of the first point Color color The color | Improve this Doc View Source DrawLineWithSmoothing(GraphicsWindow, Int32, Int32, Int32, Int32, Color, Single) Draw a line from (x1, y1) to (x2, y2) in the graphics window with the specified color and line width, and with anti-aliasing. Declaration [Extension] public static void DrawLineWithSmoothing(this GraphicsWindow gw, int x1, int y1, int x2, int y2, Color color, float width) Parameters Type Name Description GraphicsWindow gw The graphics window object Int32 x1 The x-coordinate of the first point Int32 y1 The y-coordinate of the first point Int32 x2 The x-coordinate of the second point Int32 y2 y-coordinate of the first point Color color The color Single width Line width | Improve this Doc View Source DrawRectangle(GraphicsWindow, Int32, Int32, Int32, Int32, Nullable<Color>, Color, Single) Draw a rentangle with the top-left corner at (x, y), and the specified width, height, fill color, stroke color, and stroke width. The stroke is drawn without anti-aliasing. Declaration [Extension] public static void DrawRectangle(this GraphicsWindow gw, int x, int y, int width, int height, Color? fill, Color stroke, float strokeWidth) Parameters Type Name Description GraphicsWindow gw The graphics object Int32 x The x-coordinate of the top-left corner of the rectangle Int32 y The y-coordinate of the top-left corner of the rectangle Int32 width The width of the rectangle Int32 height The height of the rectangle System.Nullable < Color > fill The color to fill, or Nothing for no fill Color stroke The color of the stroke, or Nothing for no stroke Single strokeWidth The width of the stroke | Improve this Doc View Source DrawRectangle(GraphicsWindow, Int32, Int32, Int32, Int32, Nullable<Color>, Nullable<Color>) Draw a rentangle with the top-left corner at (x, y), and the specified width, height, fill color and stroke color. Declaration [Extension] public static void DrawRectangle(this GraphicsWindow gw, int x, int y, int width, int height, Color? fill, Color? stroke) Parameters Type Name Description GraphicsWindow gw The graphics object Int32 x The x-coordinate of the top-left corner of the rectangle Int32 y The y-coordinate of the top-left corner of the rectangle Int32 width The width of the rectangle Int32 height The height of the rectangle System.Nullable < Color > fill The color to fill, or Nothing for no fill System.Nullable < Color > stroke The color of the stroke, or Nothing for no stroke | Improve this Doc View Source DrawRectangleWithSmoothing(GraphicsWindow, Int32, Int32, Int32, Int32, Nullable<Color>, Color, Single) Draw a rentangle with the top-left corner at (x, y), and the specified width, height, fill color, stroke color, and stroke width. The stroke is drawn without anti-aliasing. Declaration [Extension] public static void DrawRectangleWithSmoothing(this GraphicsWindow gw, int x, int y, int width, int height, Color? fill, Color stroke, float strokeWidth) Parameters Type Name Description GraphicsWindow gw The graphics object Int32 x The x-coordinate of the top-left corner of the rectangle Int32 y The y-coordinate of the top-left corner of the rectangle Int32 width The width of the rectangle Int32 height The height of the rectangle System.Nullable < Color > fill The color to fill, or Nothing for no fill Color stroke The color of the stroke, or Nothing for no stroke Single strokeWidth The width of the stroke | Improve this Doc View Source DrawRectangleWithSmoothing(GraphicsWindow, Int32, Int32, Int32, Int32, Nullable<Color>, Nullable<Color>) Draw a rentangle with the top-left corner at (x, y), and the specified width, height, fill color, and stroke color. The stroke is drawn with anti-aliasing. Declaration [Extension] public static void DrawRectangleWithSmoothing(this GraphicsWindow gw, int x, int y, int width, int height, Color? fill, Color? stroke) Parameters Type Name Description GraphicsWindow gw The graphics object Int32 x The x-coordinate of the top-left corner of the rectangle Int32 y The y-coordinate of the top-left corner of the rectangle Int32 width The width of the rectangle Int32 height The height of the rectangle System.Nullable < Color > fill The color to fill, or Nothing for no fill System.Nullable < Color > stroke The color of the stroke, or Nothing for no stroke"
  },
  "api/VBGraphics.GraphicsWindow.html": {
    "href": "api/VBGraphics.GraphicsWindow.html",
    "title": "Class GraphicsWindow | VBGraphics documentation",
    "keywords": "Class GraphicsWindow This is the main class of the VBGraphics package. To use VBGraphics, create a GraphicsWinodw object and then use its methods. Note that most of the methods are implemented as extension methods. So the following is needed at the beginning of your source file: Imports VBGraphics Imports VBGraphics.BitmapImage Imports VBGraphics.Shapes Imports VBGraphics.Text Inheritance Object GraphicsWindow Implements IDisposable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.Finalize() System.Object.MemberwiseClone() Namespace : VBGraphics Assembly : VBGraphics.dll Syntax public class GraphicsWindow : IDisposable Constructors | Improve this Doc View Source GraphicsWindow(Int32, Int32) Create a graphics window with the specified width and height, and fills it with black. Declaration public GraphicsWindow(int width, int height) Parameters Type Name Description Int32 width The width of the graphics window, in pixels. Int32 height The height of the graphics window, in pixels. | Improve this Doc View Source GraphicsWindow(Int32, Int32, Color) Create a graphics window with the specified width and height, and fills it with the specified color. Declaration public GraphicsWindow(int width, int height, Color color) Parameters Type Name Description Int32 width The width of the graphics window, in pixels. Int32 height The height of the graphics window, in pixels. Color color The color to fill in. Properties | Improve this Doc View Source CanClose Gets or sets a boolean indicating whether the GraphicsWindow can be closed by user action, Form.Close or Application.Exit. However, this has no effect when the GraphicsWindows is disposed, or when Windows shut down. To prevent unexpected results, set EndProgramOnClose to the desired value and add the listener to WindowClosing and WindowClosed events before setting CanClose to true. Similarly, set CanClose to false before setting EngProgramOnClose and removing event listeners. Declaration public bool CanClose { get; set; } Property Value Type Description Boolean | Improve this Doc View Source CaptureModifierKeys Gets or sets a boolean indicating whether modifier keys (Ctrl, Alt, Shift) are recorded to the key queue. Note: The Windows key is not recorded, regardless of the value of this property. Also, the Alt key comes with nasty surprises, and it should not be one of the controls of your app. Declaration public bool CaptureModifierKeys { get; set; } Property Value Type Description Boolean | Improve this Doc View Source EndProgramOnClose If true, Environment.Exit is called after GraphicsWindow is closed. EndProgramOnClose is handled after WindowClosed event is raised. Declaration public bool EndProgramOnClose { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Form Gets the Form used by the graphics window. Declaration public Form Form { get; } Property Value Type Description Form | Improve this Doc View Source Image Gets or sets the image used by the graphics window. Setting this property to an object other than a Bitmap is undefined behavior (it may work, but this is not tested). Declaration public Image Image { get; } Property Value Type Description Image | Improve this Doc View Source IsLiving Gets a boolean indicating whether the graphics windows is open. Declaration public bool IsLiving { get; } Property Value Type Description Boolean | Improve this Doc View Source KeyAvailable Gets a boolean indicating whether keys are present in the queue. Declaration public bool KeyAvailable { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source CreateGraphics() Create a Graphics object of the image of the graphics window. You can use this object to draw on the image manually. After drawing, call the Invalidate method of the GraphicsWindow to make the graphics window redraw. Otherwise, the operation you do to the image may not be shown on the screen. Declaration public Graphics CreateGraphics() Returns Type Description Graphics A Graphics object of the image of the graphics window. | Improve this Doc View Source CreateGraphicsWithSmoothing() Create a Graphics object of the image of the graphics window, with the smoothing mode of lines, curves and edges of filled areas set to antialiasing. You can use this object to draw on the image manually. After drawing, call the Invalidate method of the GraphicsWindow to make the graphics window redraw. Otherwise, the operation you do to the image may not be shown on the screen. Declaration public Graphics CreateGraphicsWithSmoothing() Returns Type Description Graphics A Graphics object of the image of the graphics window. | Improve this Doc View Source Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing | Improve this Doc View Source EmptyKeys() Empty the key queue. Declaration public void EmptyKeys() | Improve this Doc View Source Invalidate() Invalidate the graphics window, causing it to be redrawn. This should be called after you manipulate the image of the graphics window manually. Declaration public void Invalidate() | Improve this Doc View Source ReadKey() Returns the next key in the queue as KeyEventArgs. If no key is in the queue, wait until the user press the next key. Declaration public KeyEventArgs ReadKey() Returns Type Description KeyEventArgs | Improve this Doc View Source ReadKeyChar() Returns the next key in the queue as Char. If no key is in the queue, wait until the user press the next key. Note that some keys are associated the null character. Declaration public char ReadKeyChar() Returns Type Description Char | Improve this Doc View Source ReadKeyCharIfAvailable() Returns the next key in the queue as Char, or the null character if no key is in the queue. Note that some keys are associated the null character, so a null return does not indicate that no keys are pressed. Declaration public char ReadKeyCharIfAvailable() Returns Type Description Char | Improve this Doc View Source ReadKeyIfAvailable() Returns the next key in the queue as KeyEventArgs, or Nothing if no key is in the queue. Declaration public KeyEventArgs ReadKeyIfAvailable() Returns Type Description KeyEventArgs | Improve this Doc View Source ReadKeyInfo() Returns the next key in the queue as KeyInfo structure. If no key is in the queue, wait until the user press the next key. Declaration public KeyInfo ReadKeyInfo() Returns Type Description KeyInfo | Improve this Doc View Source ReadKeyInfoIfAvailable() Returns the next key in the queue as KeyInfo structure, or Nothing if no key is in the queue. Declaration public KeyInfo ReadKeyInfoIfAvailable() Returns Type Description KeyInfo | Improve this Doc View Source WaitUntilKeyAvailable() If the key queue is empty and the graphics window is open, wait until the user press a key. Declaration public void WaitUntilKeyAvailable() Events | Improve this Doc View Source WindowClosed WindowClosed is raised when the GraphicsWindow is closed, regardless of the reason of closing the window. In the case of disposing GraphicsWindows, the image in GraphicsWindow is still usable in the duration of this event. Declaration public event GraphicsWindow.WindowClosedEventHandler WindowClosed Event Type Type Description VBGraphics.GraphicsWindow.WindowClosedEventHandler | Improve this Doc View Source WindowClosing WindowClosing is raised when the user close the form, when GraphicsWindow.Form.Close is called, and when Application.Exit is called. However, the event is not raised when GraphicsWindow is disposed of, nor when Windows shut down. Declaration public event GraphicsWindow.WindowClosingEventHandler WindowClosing Event Type Type Description VBGraphics.GraphicsWindow.WindowClosingEventHandler Explicit Interface Implementations | Improve this Doc View Source IDisposable.Dispose() Close the graphics window, and release all unmanaged resources used by the window. This raises the WindowClosed event, and if EndProgramOnClose is true, also quits the program. When Dispose is run, the graphics window closes even if CanClose is false. The event WindowClosing is not raised. Declaration public void IDisposable.Dispose() Implements System.IDisposable Extension Methods Shapes.Clear(GraphicsWindow, Color) Shapes.DrawLine(GraphicsWindow, Int32, Int32, Int32, Int32, Color) Shapes.DrawLine(GraphicsWindow, Int32, Int32, Int32, Int32, Color, Single) Shapes.DrawLineWithSmoothing(GraphicsWindow, Int32, Int32, Int32, Int32, Color) Shapes.DrawLineWithSmoothing(GraphicsWindow, Int32, Int32, Int32, Int32, Color, Single) Shapes.DrawRectangle(GraphicsWindow, Int32, Int32, Int32, Int32, Nullable<Color>, Nullable<Color>) Shapes.DrawRectangle(GraphicsWindow, Int32, Int32, Int32, Int32, Nullable<Color>, Color, Single) Shapes.DrawRectangleWithSmoothing(GraphicsWindow, Int32, Int32, Int32, Int32, Nullable<Color>, Nullable<Color>) Shapes.DrawRectangleWithSmoothing(GraphicsWindow, Int32, Int32, Int32, Int32, Nullable<Color>, Color, Single) Shapes.DrawEllipse(GraphicsWindow, Int32, Int32, Int32, Int32, Nullable<Color>, Nullable<Color>) Shapes.DrawEllipse(GraphicsWindow, Int32, Int32, Int32, Int32, Nullable<Color>, Color, Single) Shapes.DrawEllipseWithSmoothing(GraphicsWindow, Int32, Int32, Int32, Int32, Nullable<Color>, Nullable<Color>) Shapes.DrawEllipseWithSmoothing(GraphicsWindow, Int32, Int32, Int32, Int32, Nullable<Color>, Color, Single) BitmapImage.DrawImage(GraphicsWindow, Image, Int32, Int32) BitmapImage.DrawImageResized(GraphicsWindow, Image, Int32, Int32, Int32, Int32) BitmapImage.DrawImageResizedWithSmoothing(GraphicsWindow, Image, Int32, Int32, Int32, Int32) BitmapImage.DrawImageWithClipping(GraphicsWindow, Image, Int32, Int32, Int32, Int32, Int32, Int32) BitmapImage.GetBitmap(GraphicsWindow) BitmapImage.GetBitmap(GraphicsWindow, Int32, Int32, Int32, Int32) Text.DrawText(GraphicsWindow, String, Int32, Int32, Color, Font) Text.DrawText(GraphicsWindow, String, Int32, Int32, Color, String, Single, FontStyle) Text.DrawTextInRectangle(GraphicsWindow, String, Int32, Int32, Int32, Int32, Color, Font, TextFormatFlags) Text.DrawTextInRectangle(GraphicsWindow, String, Int32, Int32, Int32, Int32, Color, String, Single, FontStyle, TextFormatFlags) Text.ReadLine(GraphicsWindow, Int32, Int32, Int32, Color, Color, String, Single, FontStyle, Nullable<Color>, Nullable<Color>, TextFormatFlags)"
  },
  "api/VBGraphics.Text.html": {
    "href": "api/VBGraphics.Text.html",
    "title": "Class Text | VBGraphics documentation",
    "keywords": "Class Text Inheritance Text Namespace : VBGraphics Assembly : VBGraphics.dll Syntax public class Text Methods | Improve this Doc View Source DrawText(GraphicsWindow, String, Int32, Int32, Color, Font) Draw the specified text with the top-left corner at (x, y), using the specified color and font. Declaration [Extension] public static void DrawText(this GraphicsWindow gw, string text, int x, int y, Color color, Font font) Parameters Type Name Description GraphicsWindow gw The graphics window object String text The text to draw Int32 x The x-coordinate of the top-left corner of the text Int32 y The y-coordinate of the top-left corner of the text Color color The color of the text Font font The font of the text | Improve this Doc View Source DrawText(GraphicsWindow, String, Int32, Int32, Color, String, Single, FontStyle) Draw the specified text with the top-left corner at (x, y), using the specified color, and with the font defined by its name, size and style. Declaration [Extension] public static void DrawText(this GraphicsWindow gw, string text, int x, int y, Color color, string fontName, float emSize, FontStyle fontStyle = FontStyle.Regular) Parameters Type Name Description GraphicsWindow gw The graphics window object String text The text to draw Int32 x The x-coordinate of the top-left corner of the text Int32 y The y-coordinate of the top-left corner of the text Color color The color of the text String fontName The name of the font Single emSize The em-size of the font, in points. 1 point = 4/3 pixels. FontStyle fontStyle The font style | Improve this Doc View Source DrawTextInRectangle(GraphicsWindow, String, Int32, Int32, Int32, Int32, Color, Font, TextFormatFlags) Draw the specified text with a defined bounding rectangle, using the specified color and font. The bounding rectangle is defined by the coordinates of the top-left corner and also its width and height. Declaration [Extension] public static void DrawTextInRectangle(this GraphicsWindow gw, string text, int x, int y, int width, int height, Color color, Font font, TextFormatFlags flags = TextFormatFlags.Default | TextFormatFlags.Left | TextFormatFlags.Top | TextFormatFlags.GlyphOverhangPadding) Parameters Type Name Description GraphicsWindow gw The graphics window object String text The text to draw Int32 x The x-coordinate of the top-left corner of the bounding rectangle Int32 y The y-coordinate of the top-left corner of the bounding rectangle Int32 width The width of the bounding rectangle Int32 height The height of the bounding rectangle Color color The color of the text Font font The font of the text TextFormatFlags flags A flag that controls the paragraph formatting of the text | Improve this Doc View Source DrawTextInRectangle(GraphicsWindow, String, Int32, Int32, Int32, Int32, Color, String, Single, FontStyle, TextFormatFlags) Draw the specified text with a defined bounding rectangle, using the specified color, and with the font defined by its name, size and style. The bounding rectangle is defined by the coordinates of the top-left corner and also its width and height. Declaration [Extension] public static void DrawTextInRectangle(this GraphicsWindow gw, string text, int x, int y, int width, int height, Color color, string fontName, float emSize, FontStyle fontStyle = FontStyle.Regular, TextFormatFlags flags = TextFormatFlags.Default | TextFormatFlags.Left | TextFormatFlags.Top | TextFormatFlags.GlyphOverhangPadding) Parameters Type Name Description GraphicsWindow gw The graphics window object String text The text to draw Int32 x The x-coordinate of the top-left corner of the bounding rectangle Int32 y The y-coordinate of the top-left corner of the bounding rectangle Int32 width The width of the bounding rectangle Int32 height The height of the bounding rectangle Color color The color of the text String fontName The name of the font Single emSize The em-size of the font, in points. 1 point = 4/3 pixels. FontStyle fontStyle The font style TextFormatFlags flags A flag that controls the paragraph formatting of the text | Improve this Doc View Source ReadLine(GraphicsWindow, Int32, Int32, Int32, Color, Color, String, Single, FontStyle, Nullable<Color>, Nullable<Color>, TextFormatFlags) Display a text box, and ask the user to input a line of text. The text box has its top-left corner at (x, y), with the specified width, background color and foreground color. The text box can optionally change its color after the user has finished inputting. Declaration [Extension] public static string ReadLine(this GraphicsWindow gw, int x, int y, int width, Color foreColor, Color backColor, string fontName, float emSize, FontStyle fontStyle = FontStyle.Regular, Color? foreColorAfterFinish = default (Color? ), Color? backColorAfterFinish = default (Color? ), TextFormatFlags flags = TextFormatFlags.Default | TextFormatFlags.Left | TextFormatFlags.Top | TextFormatFlags.GlyphOverhangPadding) Parameters Type Name Description GraphicsWindow gw The graphics window object Int32 x The x-coordinate of the top-left corner of the text box Int32 y The y-coordinate of the top-left corner of the text box Int32 width The width of the text box Color foreColor The foreground color of the text box Color backColor The background color of the text box String fontName The name of the font Single emSize The em-size of the font, in points. 1 point = 4/3 pixels. FontStyle fontStyle The font style System.Nullable < Color > foreColorAfterFinish The foreground color of the text box after the user has finished inputting System.Nullable < Color > backColorAfterFinish The background color of the text box after the user has finished inputting TextFormatFlags flags A flag that controls the paragraph formatting of the text Returns Type Description String The user inputt"
  },
  "api/VBGraphics.BitmapImage.html": {
    "href": "api/VBGraphics.BitmapImage.html",
    "title": "Class BitmapImage | VBGraphics documentation",
    "keywords": "Class BitmapImage Inheritance BitmapImage Namespace : VBGraphics Assembly : VBGraphics.dll Syntax public class BitmapImage Methods | Improve this Doc View Source DrawImage(GraphicsWindow, Image, Int32, Int32) Draw the image at point (x, y). Declaration [Extension] public static void DrawImage(this GraphicsWindow gw, Image image, int x, int y) Parameters Type Name Description GraphicsWindow gw The graphics object Image image The image to draw Int32 x The x-coordinate of the top-left corner of the drawn image Int32 y The y-coordinate of the top-left corner of the drawn image | Improve this Doc View Source DrawImageResized(GraphicsWindow, Image, Int32, Int32, Int32, Int32) Draw the image at point (x, y), where the image is resized to the specified width and height. The drawn image is not smoothed. Declaration [Extension] public static void DrawImageResized(this GraphicsWindow gw, Image image, int x, int y, int width, int height) Parameters Type Name Description GraphicsWindow gw The graphics object Image image The image to draw Int32 x The x-coordinate of the top-left corner of the drawn image Int32 y The y-coordinate of the top-left corner of the drawn image Int32 width The resized width Int32 height The resized height | Improve this Doc View Source DrawImageResizedWithSmoothing(GraphicsWindow, Image, Int32, Int32, Int32, Int32) Draw the image at point (x, y), where the image is resized to the specified width and height. The drawn image is smoothed. Declaration [Extension] public static void DrawImageResizedWithSmoothing(this GraphicsWindow gw, Image image, int x, int y, int width, int height) Parameters Type Name Description GraphicsWindow gw The graphics object Image image The image to draw Int32 x The x-coordinate of the top-left corner of the drawn image Int32 y The y-coordinate of the top-left corner of the drawn image Int32 width The resized width Int32 height The resized height | Improve this Doc View Source DrawImageWithClipping(GraphicsWindow, Image, Int32, Int32, Int32, Int32, Int32, Int32) Draw the specified rectangular part of the image at point (x, y). Declaration [Extension] public static void DrawImageWithClipping(this GraphicsWindow gw, Image image, int x, int y, int srcX, int srcY, int srcWidth, int srcHeight) Parameters Type Name Description GraphicsWindow gw The graphics object Image image The image to draw Int32 x The x-coordinate of the top-left corner of the drawn image Int32 y The y-coordinate of the top-left corner of the drawn image Int32 srcX The x-coordinate of the top-left corner of the specified part pf the source image Int32 srcY The y-coordinate of the top-left corner of the specified part of the source image Int32 srcWidth The width of the specified part of the source image Int32 srcHeight The height of the specified part of the source image | Improve this Doc View Source GetBitmap(GraphicsWindow) Return the graphics window as a bitmap. Declaration [Extension] public static Bitmap GetBitmap(this GraphicsWindow gw) Parameters Type Name Description GraphicsWindow gw The graphics window Returns Type Description Bitmap The bitmap of the graphics window | Improve this Doc View Source GetBitmap(GraphicsWindow, Int32, Int32, Int32, Int32) Return the specified rectangular part of the graphics window as a bitmap. Declaration [Extension] public static Bitmap GetBitmap(this GraphicsWindow gw, int x, int y, int width, int height) Parameters Type Name Description GraphicsWindow gw The graphics window Int32 x The x-coordinate of the top-left corner of the specified part Int32 y The y-coordinate of the top-left corner of the specified part Int32 width The width of the specfied part Int32 height The height of the specfied part Returns Type Description Bitmap The bitmap of the specified rectangular part of graphics window"
  },
  "api/VBGraphics.KeyInfo.html": {
    "href": "api/VBGraphics.KeyInfo.html",
    "title": "Struct KeyInfo | VBGraphics documentation",
    "keywords": "Struct KeyInfo Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : VBGraphics Assembly : VBGraphics.dll Syntax public struct KeyInfo Constructors | Improve this Doc View Source KeyInfo(KeyEventArgs, Char) Declaration public KeyInfo(KeyEventArgs key, char keyChar) Parameters Type Name Description KeyEventArgs key Char keyChar Properties | Improve this Doc View Source Key Declaration public KeyEventArgs Key { get; } Property Value Type Description KeyEventArgs | Improve this Doc View Source KeyChar Declaration public char KeyChar { get; } Property Value Type Description Char"
  },
  "api/VBGraphics.html": {
    "href": "api/VBGraphics.html",
    "title": "Namespace VBGraphics | VBGraphics documentation",
    "keywords": "Namespace VBGraphics Here is an overview of the classes and structures in the package: GraphicsWindow : The main class you are interacting with. All other classes: Extension modules that provides functionality to GraphicsWindow . KeyInfo : The structure returned by ReadKeyInfo() and ReadKeyInfoIfAvailable() . Classes BitmapImage GraphicsWindow This is the main class of the VBGraphics package. To use VBGraphics, create a GraphicsWinodw object and then use its methods. Note that most of the methods are implemented as extension methods. So the following is needed at the beginning of your source file: Imports VBGraphics Imports VBGraphics.BitmapImage Imports VBGraphics.Shapes Imports VBGraphics.Text Shapes Text Structs KeyInfo"
  }
}